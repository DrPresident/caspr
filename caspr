#!/usr/bin/python

import RPi.GPIO as gpio

from time import sleep

# from display import Display
from vision_controller import Vision
from motion_controller import Motion
from motor_controller import Motor
from servo_controller import Servo
from camera import Camera

from sys import stdin, argv, exit
from signal import signal
from socket import *
from threading import Thread
from curses import *
from getch import getch

from math import sin, cos
from mapper import Mapper

# setup
gpio.setmode(gpio.BCM)

"""
display = Display()
display.intro_anim()
"""

"""
center_vis = Vision(gpio, 17, 4)
display.center_vision(center_vis)
center_vis.start()

left_vis = Vision(gpio, 22, 27)
display.left_vision(left_vis)
left_vis.run()

right_vis = Vision(gpio, 9, 10)
display.right_vision(right_vis)
right_vis.run()
"""
def scan(step = 45):
    r = 180
    results = []
    for r in xrange(180, 0, -step):
        servo.set_rotation(r)
        results += [ radar.avg_pulse() ]

    return results

"""
    # look left
    servo.set_rotation(180)
    left = radar.avg_pulse()

    # look forward
    servo.set_rotation(90)
    front = radar.avg_pulse()

    # look right
    servo.set_rotation(0)
    right = radar.avg_pulse()

    return (left, front, right)
"""

radar = Vision(gpio, 17, 4)

# motion = Motion(gpio, (13, 6), (26, 19))
right_motor = Motor(gpio, (13, 6), 100)
left_motor = Motor(gpio, (26, 19), 100)

servo = Servo(gpio, 18)

"""
camera = Camera(fps=10)
camera.start()
"""

def cleanup(sig, frame):
    print "cleaning up!"
    gpio.cleanup()
    exit(0)

signal(2, cleanup)

# returns the response data to be sent back to report results
# <data_type><data>
def control_input(key):
    # TODO: arrow keys
    if key == ',' or key == 'w':
        print 'forward!'
        #motion.forward()
        left_motor.forward()
        right_motor.forward()
    elif key == 'a': 
        print 'turning left'
        #motion.rotate_left()
        left_motor.reverse()
        right_motor.forward()
    elif key == 'o' or key == 's':
        if left_motor.motion is None and right_motor.motion is None:
            print 'back it up'
            #motion.back()
            left_motor.reverse()
            right_motor.reverse()
        else:
            print 'stop'
            #motion.stop()
            left_motor.stop()
            right_motor.stop()

    elif key == 'e' or key == 'd':
        print 'turning right'
        # motion.rotate_right()
        left_motor.forward()
        right_motor.reverse()
    elif key == 'm':
        print 'motor control'

    elif key == KEY_UP:
        print 'uparrow'
    elif key == KEY_DOWN:
        print 'downarrow'
    elif key == KEY_LEFT:
        print 'leftarrow'
    elif key == KEY_RIGHT:
        print 'rightarrow'

    # Camera Controls
    elif key == 'l':
        servo.rotate_down()
        return servo.rot
    elif key == 'L':
        servo.rotate_up()
        return servo.rot
    # Radar  
    # Thorough Pulse
    elif key == 'P':
        dist = radar.avg_pulse()
        print dist, 'cm'
        return dist
    # Quick Pulse
    elif key == 'p':
        dist = radar.pulse()
        print dist, 'cm'
        return dist

    # Thorough Scan
    elif key == 'S':
        print ' '.join(scan())


    """
    # Quick Scan
    elif key == 'S':
        # look left
        servo.set_rotation(180)
        print 'left:', radar.pulse(), 'cm'
        # look forward
        servo.set_rotation(90)
        print 'front:', radar.pulse(), 'cm'
        # look right
        servo.set_rotation(0)
        print 'right:', radar.pulse(), 'cm'
    """


if len(argv) < 2 or argv[1] == '-l' or argv[1] == '--local':
    print "You're the driver!"
    """
    screen = initscr()
    screen.keypad(True)
    noecho()
    cbreak()
    """

    c = 'true'
    while c:
        c = getch() #screen.getch()
        control_input(c)

    """
    echo()
    nocbreak()
    endwin()
    """


elif argv[1] == '-r' or argv[1] == '--remote':
    print "Remote driving enabled"
    sock = socket(AF_INET, SOCK_STREAM)
    sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)

    print sock
    sock.bind(('0.0.0.0', 6969))
    print 'bound'
    sock.listen(1)
    print 'started listening'

    try:
        while True:
            (rsock, addr) = sock.accept()
            print "Connected: ", addr

            try:
                while True:
                    c = rsock.recv(1)
                    if c:
                        control_input(c)
                    else:
                        print addr, 'disconnected'
                        break

            finally:
                rsock.close()
    finally:
        sock.close()

elif argv[1] == '-a' or argv[1] == '--auto': 
    # distances in cm
    too_close = 30

    # times in ms
    pulse_timer = 10

    servo.set_rotation(90)

    while True:
        distance = radar.avg_pulse()

        if distance <= too_close:
            paths = radar.scan()
            if paths[0] > paths[1]:
                # turn_left
                pass
            else:
                # turn_right
                pass

        left_motor.forward()
        right_motor.forward()

elif argv[1] == '-e' or argv[1] == '--explore':
    map_size = 1024
    # unit size in cm
    map_unit = 10
    location = ( map_size / 2, map_size / 2 )

elif argv[1] == '-m' or argv[1] == '--mapper':


    # degrees
    scan_step = 5

    print "scanning"
    # tuple of ping distances
    results = scan(scan_step)
    print "scan complete", results
    print "init mapper",
    mapper = Mapper()
    print "done"

    for r in xrange(len(results)):
        d = results[r]
        r = scan_step * r

        print r, 'degrees', d, 'cm'
        x = d * cos(r)
        y = d * sin(r)
        print '(x,y)', (x,y)

else:
    print 'bad arguments:', ','.join(argv[1:])
